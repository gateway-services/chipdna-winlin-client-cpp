#ifndef SCOPE_H
#define SCOPE_H

#include <string>
#include <map>

namespace ChipDnaClientLib {
		
	namespace ParameterTokens {

		/**
		* \brief
		* 	Scope defines the set of devices that would generate this same hash for a particular card.
		*/
		enum class Scope {
			/**
			* \brief
			* 	No info is known about this hash scope.
			*/
			Unknown,

			/**
			* \brief
			* 	Hash is locked to this Terminal only.
			*/
			Terminal,

			/**
			* \brief
			* 	Hash is locked to terminals on this Terminal Group.
			*/
			TerminalGroup,

			/**
			* \brief
			* 	Hash is locked to terminals on this merchant.
			*/
			Merchant,

			/**
			* \brief
			* 	Hash is locked to terminals on this client.
			*/
			Client,

			/**
			* \brief
			* 	Hash is locked to the same processor (e.g. Chase Canada).
			*/
			Processor,

			/**
			* \brief
			* 	Hash is locked to a same territory (e.g. UK/EU or US or CA).
			*/
			Territory,

			/**
			* \brief
			* 	Indicates this hash can only be generated by same models of the device.
			*/
			PaymentDeviceModel,

			/**
			* \brief
			* 	Indicates this hash can only be generated by devices by the same manufacturer.
			*/
			PaymentDeviceManufacturer,

			/**
			* \brief
			* 	Indicates this hash can be used with the CardReference to do a future tokenised payment.
			*/
			TokenPaymentCompatible,

			/**
			* \brief
			* 	Indicates this hash was generated only by the platform. If cannot be generated offline by a terminal.
			*/
			Platform
		};

		struct ScopeMapGenerator {
			static std::map<std::string, Scope> CreateMap() {
				std::map<std::string, Scope> map;
				map["Unknown"] = Scope::Unknown;
				map["Terminal"] = Scope::Terminal;
				map["TerminalGroup"] = Scope::TerminalGroup;
				map["Merchant"] = Scope::Merchant;
				map["Client"] = Scope::Client;
				map["Processor"] = Scope::Processor;
				map["Territory"] = Scope::Territory;
				map["PaymentDeviceModel"] = Scope::PaymentDeviceModel;
				map["PaymentDeviceManufacturer"] = Scope::PaymentDeviceManufacturer;
				map["TokenPaymentCompatible"] = Scope::TokenPaymentCompatible;
				map["Platform"] = Scope::Platform;
				return map;
			}
		};

		/**
		* \brief
		* 	Converts a string to a {@link Scope} value.
		**/
		const std::map<std::string, Scope> StringToScope = ScopeMapGenerator::CreateMap();
	}
}
#endif